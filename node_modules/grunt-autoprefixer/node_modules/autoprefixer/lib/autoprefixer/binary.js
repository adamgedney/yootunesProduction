(function(){var e,t,n;t=require("../autoprefixer"),n=require("fs"),e=function(){function e(e){this.arguments=e.argv.slice(2),this.stdin=e.stdin,this.stderr=e.stderr,this.stdout=e.stdout,this.status=0,this.command="compile",this.inputFiles=[],this.parseArguments()}return e.prototype.help=function(){return"Usage: autoprefixer [OPTION...] FILES\n\nParse CSS files and add prefixed properties and values.\n\nOptions:\n  -b, --browsers BROWSERS  add prefixes for selected browsers\n  -o, --output FILE        set output CSS file\n  -i, --inspect            show selected browsers and properties\n  -h, --help               show help text\n  -v, --version            print program version"},e.prototype.desc=function(){return'Files:\n  By default, prefixed CSS will rewrite original files.\n  If you didn\'t set input files, autoprefixer will +\n    read from stdin stream.\n  Output CSS will be written to stdout stream on +\n    `-o -\' argument or stdin input.\n\nBrowsers:\n  Separate browsers by comma. For example, `-b "> 1%, opera 12"\'.\n  You can set browsers by global usage statictics: `-b "> 1%"\'.\n  or last version: `-b "last 2 versions"\' (by default).'.replace(/\+\s+/g,"")},e.prototype.print=function(e){return e=e.replace(/\n$/,""),this.stdout.write(e+"\n")},e.prototype.error=function(e){return this.status=1,this.stderr.write(e+"\n")},e.prototype.version=function(){return require("../../package.json").version},e.prototype.parseArguments=function(){var e,t;t=this.arguments.slice();while(t.length>0){e=t.shift();switch(e){case"-h":case"--help":this.command="showHelp";break;case"-v":case"--version":this.command="showVersion";break;case"-i":case"--inspect":this.command="inspect";break;case"-u":case"--update":this.command="update";break;case"-b":case"--browsers":this.requirements=t.shift().split(",").map(function(e){return e.trim()});break;case"-o":case"--output":this.outputFile=t.shift();break;default:e.match(/^-\w$/)||e.match(/^--\w[\w-]+$/)?(this.command=void 0,this.error("autoprefixer: Unknown argument "+e),this.error(""),this.error(this.help())):this.inputFiles.push(e)}}},e.prototype.showHelp=function(e){return this.print(this.help()),this.print(""),this.print(this.desc()),e()},e.prototype.showVersion=function(e){return this.print("autoprefixer "+this.version()),e()},e.prototype.inspect=function(e){return this.print(this.compiler().inspect()),e()},e.prototype.update=function(e){var t,n,r=this;try{t=require("coffee-script")}catch(i){return this.error("Install coffee-script npm package"),e()}return n=require("./updater"),n.request(function(){return r.stdout.write(".")}),n.done(function(){return r.print(""),n.changed.length===0?r.print("Everything up-to-date"):r.print("Update "+n.changed.join(" and ")+" data"),e()}),n.run()},e.prototype.startWork=function(){return this.waiting+=1},e.prototype.endWork=function(){this.waiting-=1;if(this.waiting<=0)return this.doneCallback()},e.prototype.workError=function(e){return this.error(e),this.endWork()},e.prototype.compiler=function(){return this.compilerCache||(this.compilerCache=t(this.requirements))},e.prototype.compileCSS=function(e,t){var r,i,s=this;try{i=this.compiler().compile(e)}catch(o){r=o,r.autoprefixer||r.css?this.error("autoprefixer: "+r.message):this.error("autoprefixer: Internal error"),(r.css||!r.autoprefixer)&&r.stack!=null&&(this.error(""),this.error(r.stack))}if(!i)return this.endWork();if(this.outputFile==="-")return this.print(i),this.endWork();if(this.outputFile)try{return this.outputInited||(this.outputInited=!0,n.writeFileSync(this.outputFile,"")),n.appendFileSync(this.outputFile,i),this.endWork()}catch(o){return r=o,this.workError("autoprefixer: "+r.message)}else if(t)return n.writeFile(t,i,function(e){return e&&s.error("autoprefixer: "+e),s.endWork()})},e.prototype.compile=function(e){var t,r,i,s,o,u,a,f,l,c=this;this.waiting=0,this.doneCallback=e;if(this.inputFiles.length===0)return this.startWork(),this.outputFile||(this.outputFile="-"),t="",this.stdin.resume(),this.stdin.on("data",function(e){return t+=e}),this.stdin.on("end",function(){return c.compileCSS(t)});f=this.inputFiles;for(s=0,u=f.length;s<u;s++)i=f[s],this.startWork();l=this.inputFiles;for(o=0,a=l.length;o<a;o++){i=l[o];if(!n.existsSync(i)){this.workError("autoprefixer: File "+i+" doesn't exists");continue}try{t=n.readFileSync(i).toString()}catch(h){r=h,this.workError("autoprefixer: "+r.message);continue}this.compileCSS(t,i)}return!1},e.prototype.run=function(e){return this.command?this[this.command](e):e()},e}(),module.exports=e}).call(this);